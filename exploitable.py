

'''
	you expand this. simple check for if a page is vulnerable to 
	injection attack. Does the page change based on the payload? 
	-	probably is vulnerable to an injection attack
	
	you should parse this, generate a score function and add both the score function and the reported data to the 
	database.
'''

def get_random_id():
	return "".join([random.choice(string.ascii_letters) for x in range(8)])

def injection(site, payload):
	soup = BeautifulSoup(site)
	tags = soup.find_all()

	payload_injected = False
	even_double_quotation = (site.count('"') % 2 == 0)
	even_single_quotation = (site.count("'") % 2 == 0)
	if(payload in site):
		payload_injected = True
	tag_count = len(tags)
	
	found_in = []
	for element in tags:
		if(payload in element.contents):
			found_in.append(element.name)

	return {
		"site":site,
		"payload":payload,
		"even_double_quotation":even_double_quotation,
		"even_single_quotation":even_single_quotation,
		"tag_count":tag_count,
		"payload_found_in":found_in
	}